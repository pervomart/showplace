{"version":3,"sources":["panels/Main.js","panels/Home.js","App.js","index.js"],"names":["Main","id","go","fetchedUser","fetchedGeo","title","size","level","onClick","data-to","Home","before","photo_200","src","description","city","first_name","last_name","lat","long","App","useState","activePanel","setActivePanel","setUser","setGeo","popout","setPopout","useEffect","a","bridge","send","user","location","setInterval","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"0oBA6BeA,EAnBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,EAAWC,YAAX,EAAwBC,WAAxB,OACZ,kBAAC,IAAD,CAAOH,GAAIA,GACV,kBAAC,IAAD,2DAEA,kBAAC,IAAD,CAAOI,MAAM,0DACZ,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQC,KAAK,KAAKC,MAAM,IAAIC,QAASN,EAAIO,UAAQ,QAAjD,+G,kCCqCWC,EA3CF,SAAC,GAAD,IAAGT,EAAH,EAAGA,GAAQE,GAAX,EAAOD,GAAP,EAAWC,aAAaC,EAAxB,EAAwBA,WAAxB,OACZ,kBAAC,IAAD,CAAOH,GAAIA,GACV,kBAAC,IAAD,gHACCE,GACD,kBAAC,IAAD,CAAOE,MAAM,6IACZ,kBAAC,IAAD,CACCM,OAAQR,EAAYS,UAAY,kBAAC,IAAD,CAAQC,IAAKV,EAAYS,YAAe,KACxEE,YAAaX,EAAYY,MAAQZ,EAAYY,KAAKV,MAAQF,EAAYY,KAAKV,MAAQ,IAFpF,UAIKF,EAAYa,WAJjB,YAI+Bb,EAAYc,aAI3Cb,GACD,kBAAC,IAAD,CAAOC,MAAM,sKACZ,kBAAC,IAAD,eACKD,EAAWc,IADhB,YACuBd,EAAWe,QAGnC,kBAAC,IAAD,mHCsBaC,EA1CH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,mBAEVlB,EAFU,KAEGqB,EAFH,OAGYH,mBAAS,MAHrB,mBAGVjB,EAHU,KAGEqB,EAHF,OAIWJ,mBAAS,kBAAC,IAAD,CAAef,KAAK,WAJxC,mBAIVoB,EAJU,KAIFC,EAJE,KAMjBC,qBAAU,WAAM,4CAQf,8BAAAC,EAAA,sEACoBC,IAAOC,KAAK,uBADhC,cACOC,EADP,gBAEsBF,IAAOC,KAAK,qBAAsB,IAFxD,OAEKE,EAFL,OAGCT,EAAQQ,GACRP,EAAOQ,GACPN,EAAU,MACVO,YAAW,sBACV,sBAAAL,EAAA,sEACkBC,IAAOC,KAAK,qBAAsB,IADpD,OACCE,EADD,OAECR,EAAOQ,GAFR,2CAGG,KAVL,6CARe,sBACfH,IAAOK,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACnC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALzB,mCAqBfQ,KACE,IAEH,IAAM7C,EAAK,SAAA8C,GACVzB,EAAeyB,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAM7B,YAAaA,EAAaI,OAAQA,GACvC,kBAAC,EAAD,CAAMzB,GAAG,OAAOC,GAAIA,IACpB,kBAAC,EAAD,CAAMD,GAAG,OAAOE,YAAaA,EAAaC,WAAYA,EAAYF,GAAIA,MCtCzE4B,IAAOC,KAAK,gBAEZqB,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,W","file":"static/js/main.92193f81.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\r\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\r\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\r\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\r\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\r\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\r\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\r\n\r\nconst Main = ({ id, go, fetchedUser, fetchedGeo }) => (\r\n\t<Panel id={id}>\r\n\t\t<PanelHeader>Чтоздесь?!</PanelHeader>\r\n\r\n\t\t<Group title=\"Навигация\">\r\n\t\t\t<Div>\r\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"home\">\r\n\t\t\t\t\tМоё местоположение\r\n\t\t\t\t</Button>\r\n\t\t\t</Div>\r\n\t\t</Group>\r\n\t</Panel>\r\n);\r\n\r\nMain.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nconst Home = ({ id, go, fetchedUser, fetchedGeo }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Моё местоположение</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group title=\"Кто у нас тут путешествует?\">\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n\t\t\t>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\n\t\t{fetchedGeo &&\n\t\t<Group title=\"Мы вычислили, где ты находишься.\">\n\t\t\t<Cell>\n\t\t\t\t{`${fetchedGeo.lat} ${fetchedGeo.long}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\t\t<Div>\n\t\t\tЭто твои координаты\n\t\t</Div>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n\tfetchedGeo: PropTypes.shape({\n\t\tlat: PropTypes.string,\n\t\tlong: PropTypes.string,\n\t}),\n\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Main from './panels/Main';\nimport Home from './panels/Home';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('main');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [fetchedGeo, setGeo] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tvar location = await bridge.send(\"VKWebAppGetGeodata\", {});\n\t\t\tsetUser(user);\n\t\t\tsetGeo(location);\n\t\t\tsetPopout(null);\n\t\t\tsetInterval(\n\t\t\t\tasync function(){\n\t\t\t\t\tlocation = await bridge.send(\"VKWebAppGetGeodata\", {});\n\t\t\t\t\tsetGeo(location);\n\t\t\t\t}, 5000\n\t\t\t);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Main id='main' go={go} />\n\t\t\t<Home id='home' fetchedUser={fetchedUser} fetchedGeo={fetchedGeo} go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}